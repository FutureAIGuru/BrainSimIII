<?xml version="1.0" encoding="utf-8"?>
<ArrayOfModuleDescription xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ModuleDescription>
    <moduleName>ModuleUKS</moduleName>
    <description>This dialog shows the content of the Universal Knowledge Store (UKS) which is a graph composed of Things and Relationships which connect them.  Unlike most modules, you may have any number of UKS dialogs open for multiple views into the same data.  You can expand items in the tree view.   

Thing/Relationship Display: 
          Each Thing with children has a small triangle which will expand it. 
          After the Thing’s name, the first number is the number of children and the second one is the total number of descendants. 
          Color: 
                    Green: Thing or Relationship has recently been accessed/added/changed. 
                    Yellow: Relationship is about to be deleted.

Buttons:
          Initialize: Creates a UKS with just a few basic elements.

Context Menu:
For a Relationship, the only option is to delete the relationship.
For a Thing, options are:
          Rename the Thing: Case is preserved but searches are case-insensitive. If the name already exists in the UKS, digits will be appended to make it unique.
          Expand all descendants:  Only one thing can be fully expanded at a time.
          Delete: Deletes the Thing and all its children
          Make Root: Makes this Thing the root of the tree view.
          Show All: Makes the Thing labeled “Thing” the root of the tree view.
          Parents: All parents are shown.  Clicking on one makes it the root of the tree view.

Bottom Panel:
          Root: Type in the name of the Thing to be the root of the Tree view. Setting this to blank shows any Things which have no parents (for debugging).
          Auto-refresh / Refresh button: When the checkbox is checked, the tree view refreshes every 200 ms. When it is not checked, use the Refresh button to update the display.
          Show Conf. Shows or hide the confidence values associated with each Relationship. The confidence for Things is the confidence value of the Relationship which makes it a child.
          Status: Shows total number of Things and Relationships in the UKS.
</description>
  </ModuleDescription>
  <ModuleDescription>
    <moduleName>ModuleSpeechInPlus</moduleName>
    <description>Speech input is handled through Azure Cognitive Services Speech to Text, verbal commands have to be prefaced with "Sallie". Text entered via the dialogue box, is inputted directly, doesn't need to include "Sallie."

Sometimes the results from Speech Recognition well include words before the "Sallie" keyword. Everything up to and including "Sallie" is disregarded.

Dialogue Contents:
Enable Speech Recognition Checkbox: Pause or Resume Speech Recognition
Text Box: When pressing enter, any text is processed the same as Speech Recognition Results.
Radio Buttons: Select Local or remote Mic
Open Command File: Opens up a text file. Each line is a seperate phrase. A special command of pause &lt;x&gt; can be used where x is the number of cycles to wait.

Works together with SpeechParser, PhraseRecognizer, QueryResolution and SpeechOut to functions as Sallie's ability to hear and speak.</description>
  </ModuleDescription>
  <ModuleDescription>
    <moduleName>ModuleUKSStatement</moduleName>
    <description>This dialog adds Things and Relationships to the Universal Knowledge Store (UKS) which is a graph of Things connected by Relationships.  Each Relationship consists of a Source Thing, a Target Thing, connected by a RelationshipType Thing.  Enter Thing labels into the Source, Type, and Target boxes and press Add/Update to create a relationship.
Example
          Source: Fido
          Type: is-a
          Target: dog
Would indicate that Fido is a dog. This is shown in the UKS dialog as a parent/child Relationship.  All other relationship types are shown as Source-&gt;Type-&gt;Target. All words in labels are singularized so:
          Source: dogs
          Type: have
          Target: fur
Is shown as dog-&gt;has-&gt;fur.  In general, Things in the UKS represent abstract singular entities so the Relationship dog-&gt;has.4-&gt;leg would represent that all dogs have 4 legs.
If the Things in the text boxes do not exist, the boxes will have a yellow background and the Things will be created. If the relationship already exists, no action will be taken. In some cases the target may be omitted as in Mary runs. If a label is entered with an asterisk, it will have digits appended to it to ensure that it is unique. This feature can be used to create sequences in a specific order as in Pi-&gt;hasDigit*-&gt;3,  Pi-&gt;hasDigit*-&gt;., Pi-&gt;hasDigit*-&gt;1,  Pi-&gt;hasDigit*-&gt;4.

Putting multiple labels in the text boxes will add modifiers. 
Example
          Source: Fido
          Type: is-a
          Target: big dog
Will create a subclass of dog, big.dog with the Relationship big.dog-&gt;is-&gt;big and make Fido a child of big.dog.  In the Source and Target boxes, modifiers precede the main Thing; in the Type box, modifiers follow the type. 
Example
          Source: Mary
          Type: can play
          Target: electric violin
Where the Target creates a subclass of violin with the modifier electric, the Type creates a subclass of can with the modifier play.

Relationship may also have a confidence level and a duration which will be set if the Set Conf. checkbox is checked. Confidences can change automatically under certain conditions. When the duration of a Relationship expires, it will vanish.

</description>
  </ModuleDescription>
  <ModuleDescription>
    <moduleName>ModuleUKSQuery</moduleName>
    <description>This dialog queries the UKS content and returns the result.  There are 4 textboxes: 
 Source
 Type
 Target
 Filter

Each of these can be filled in with one or more Thing labels separated by spaces. Text which is not a Thing label is ignored. Searches are case-insensitive and singularized.

If Source or Target alone, the system will respond with all relationships which match. If any two of Source, Target, and Type are provided, the system will respond with the data which would fill in the empty item.  If you fill in all three, the system will respond with the Relationship (if any) which matches.

The system first searches for a sequence of inputs.  Entering 3 . 1 4 (with intervening spaces) will respond with data about Pi as it matches the sequences.  If there is no sequence, the system attempts to find a Thing which has attributes matchings all the given Things.  As such, big.dog and big dog will have equivalent meaning. The first is a single Thing label which the second is two Thing labels of which only matching Thing is big.dog.

After the query is performed, any Things in the Filter box will limit the result to items which have Filter Things as ancestors.
</description>
  </ModuleDescription>
  <ModuleDescription>
    <moduleName>ModuleUKSClause</moduleName>
    <description>This dialog creates a Relationship between two Relastionships connected by a Clause Type.  This can be used to create conditioinan relationships by using the clause type "if".  That is, enter Mary can play outside if weather is sunny.  This relationship will only be added to search results if the condition, weather is sunny, is true.</description>
  </ModuleDescription>
  <ModuleDescription>
    <moduleName>ModuleVision</moduleName>
    <description>This module iintended to provide input/test data for visual recognition. It performs generic CV algorithms  to locate corners in a simple visual input.</description>
  </ModuleDescription>
  <ModuleDescription>
    <moduleName>ModuleShape</moduleName>
    <description>This module allows the system to save shapes and retrieve them by content.</description>
  </ModuleDescription>
  <ModuleDescription>
    <moduleName>ModuleAttributeBubble</moduleName>
    <description>This Agent scans the UKS Object tree looking for object Children which have common attributes which can be "bubbled" up to the parent.

Given a number of dogs, some of which are defined as having 4 legs, the having-4-legs attributes  can be added to the "Dog" node. This makes the original relationship(s) redundant and they can subsequently be removed by the "Remove Redundancy"  Agent.</description>
  </ModuleDescription>
</ArrayOfModuleDescription>